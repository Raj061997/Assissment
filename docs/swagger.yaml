basePath: /api
definitions:
  models.BlogPost:
    properties:
      body:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      title:
        type: string
      updated_at:
        type: string
    type: object
  models.CreateBlogRequest:
    properties:
      body:
        type: string
      description:
        type: string
      title:
        type: string
    required:
    - body
    - description
    - title
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.UpdateBlogRequest:
    properties:
      body:
        description: Optional
        type: string
      description:
        description: Optional
        type: string
      title:
        description: Optional
        type: string
    type: object
host: localhost:3000
info:
  contact: {}
  description: Simple Blog API using Go-Fiber, PostgreSQL, and Swagger
  title: Blog CRUD API
  version: "1.0"
paths:
  /blog-post:
    get:
      description: Retrieve a list of all blog posts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BlogPost'
            type: array
      summary: Get all blog posts
      tags:
      - Blog
    post:
      consumes:
      - application/json
      description: Create a new blog post with title, description, and body
      parameters:
      - description: Blog Post Data
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.CreateBlogRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.BlogPost'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new blog post
      tags:
      - Blog
  /blog-post/{id}:
    delete:
      description: Delete a blog post by ID
      parameters:
      - description: Blog Post ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a blog post
      tags:
      - Blog
    get:
      description: Get details of a blog post by ID
      parameters:
      - description: Blog Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BlogPost'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a single blog post
      tags:
      - Blog
    patch:
      consumes:
      - application/json
      description: Update a blog post's title, description, or body by ID
      parameters:
      - description: Blog Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Blog Post Data
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.UpdateBlogRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BlogPost'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a blog post
      tags:
      - Blog
swagger: "2.0"
