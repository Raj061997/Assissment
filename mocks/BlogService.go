// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	models "example/models"

	mock "github.com/stretchr/testify/mock"
)

// BlogService is an autogenerated mock type for the BlogService type
type BlogService struct {
	mock.Mock
}

// Create provides a mock function with given fields: post
func (_m *BlogService) Create(post *models.BlogPost) error {
	ret := _m.Called(post)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.BlogPost) error); ok {
		r0 = rf(post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *BlogService) Delete(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with no fields
func (_m *BlogService) GetAll() ([]models.BlogPost, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.BlogPost
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.BlogPost, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.BlogPost); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.BlogPost)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *BlogService) GetByID(id uint) (*models.BlogPost, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.BlogPost
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*models.BlogPost, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *models.BlogPost); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.BlogPost)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, post
func (_m *BlogService) Update(id uint, post *models.BlogPost) error {
	ret := _m.Called(id, post)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, *models.BlogPost) error); ok {
		r0 = rf(id, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBlogService creates a new instance of BlogService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlogService(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlogService {
	mock := &BlogService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
